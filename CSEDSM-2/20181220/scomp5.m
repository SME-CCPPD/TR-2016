                                            %Discrete Fourier Decompositionclear all;close all;[y fc] = audioread("test.wav");             %segnalewsize = 8000;win = [0:wsize-1];                          %window arrayB = ones(1, wsize);                         %finestra boxcary = y(1:wsize)';                            %y = y(:,1); --> per prendere solo il primo canale di un file stereosinc = 1/fc;dur = length(y)/fc;t = [0:sinc:dur-sinc];                      %causaley = 0.5*cos(2*pi*440*t(1:wsize));binsize = 10;                               %passo di campionamento delle frequenzeF = [0:binsize:fc-binsize];H = 0.5 - 0.5*cos((2*pi)/wsize*win);        %finestra di Von Hannyh = y.*H;                                  %segnale finestratoDFD = zeros(1, length(F));DFDH = zeros(1, length(F));for(k=1:length(F));                         %analisi  fanal = F(k);  wanal = 2*pi*fanal;  yanal = e.^(-i*wanal*t);    yr = y .* yanal;                          %segnale non finestrato  yrh = yh .* yanal;                        %segnale finestrato  DFD(k) = sum(yr);  DFDH(k) = sum(yrh);endbfact = wsize/sum(B)/wsize;                       %fattore di normalizzazione - boxcarhfact = wsize/sum(H)/wsize;                       %fattore di normalizzazione - hanning%hfact è il doppio di bfact perchè usando la finestra di Von Hann, si perde metà dell'energia del segnale%plot(F, 2*abs(DFD)/length(t));              %ampiezza linearefigure(1)plot(F, 20*log10(2*abs(DFD)*bfact), F, 20*log10(2*abs(DFDH)*hfact));    %ampiezza in dbaxis([0 5000 -200 0]);%figure(3)%plot(t, yh)                                 %segnale finestrato